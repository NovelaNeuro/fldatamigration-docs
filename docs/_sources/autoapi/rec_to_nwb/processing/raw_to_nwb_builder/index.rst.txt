:mod:`rec_to_nwb.processing.raw_to_nwb_builder`
===============================================

.. py:module:: rec_to_nwb.processing.raw_to_nwb_builder


Module Contents
---------------


.. data:: path
   

   

.. data:: logger
   

   

.. data:: _DEFAULT_LFP_EXPORT_ARGS
   :annotation: = ['-highpass', '0', '-lowpass', '400', '-interp', '0', '-userefs', '0', '-outputrate', '1500']

   

.. data:: _DEFAULT_MDA_EXPORT_ARGS
   :annotation: = ['-usespikefilters', '0', '-interp', '0', '-userefs', '0']

   

.. data:: _DEFAULT_TRODES_REC_EXPORT_ARGS
   :annotation: = []

   

.. py:class:: RawToNWBBuilder(data_path: str, animal_name: str, dates: list, nwb_metadata: MetadataManager, output_path: str = '', extract_analog: bool = True, extract_spikes: bool = False, extract_lfps: bool = False, extract_dio: bool = True, extract_mda: bool = True, process_mda_valid_times: bool = True, process_mda_invalid_times: bool = True, process_pos_valid_times: bool = True, process_pos_invalid_times: bool = True, overwrite: bool = True, lfp_export_args: tuple = _DEFAULT_LFP_EXPORT_ARGS, mda_export_args: tuple = _DEFAULT_MDA_EXPORT_ARGS, parallel_instances: int = 4, trodes_rec_export_args: tuple = _DEFAULT_TRODES_REC_EXPORT_ARGS)

   Unpack data from raw folder specified by arguments, and write those data into NWB file format

   :param data_path: path to directory containing all experiments data
   :type data_path: string
   :param animal_name: directory name which represents animal subject of experiment
   :type animal_name: string
   :param dates: dates of experiments on above animal
   :type dates: list of strings
   :param nwb_metadata: object containig metadata about experiment
   :type nwb_metadata: MetadataManager
   :param output_path: path and name specifying where .nwb file gonna be written
   :type output_path: string
   :param extract_analog: flag if analog data should be extracted and processed from raw data
   :type extract_analog: boolean
   :param extract_spikes: flag if spikes data should be extracted and processed from raw data
   :type extract_spikes: boolean
   :param extract_lfps: flag  if lfps data should be extracted and processed from raw data
   :type extract_lfps: boolean
   :param extract_dio: flag if dio data should be extracted and processed from raw data
   :type extract_dio: boolean
   :param extract_mda: flag if mda data should be extracted and processed from raw data
   :type extract_mda: boolean
   :param process_mda_valid_times: flag if mda valid times should be processed
   :type process_mda_valid_times: boolean
   :param process_mda_invalid_times: flag if mda invalid times should be processed
   :type process_mda_invalid_times: boolean
   :param process_pos_valid_times: flag if pos valid times should be processed
   :type process_pos_valid_times: boolean
   :param process_pos_invalid_times: flag if pos invalid times should be processed
   :type process_pos_invalid_times: boolean
   :param overwrite: flag if current extracted data in preprocessed folder content should be overwritten
   :type overwrite: boolean
   :param lfp_export_args: parameters to launch lfp extraction from spikegadgets
   :type lfp_export_args: tuple of strings
   :param mda_export_args: parameters to launch mda extraction from spikegadgets
   :type mda_export_args: tuple of strings
   :param trodes_rec_export_args: parameters to launch analog extraction from spikegadgets
   :type trodes_rec_export_args: tuple of strings
   :param parallel_instances: number of parallel processes used during processing data
   :type parallel_instances: int

   .. method:: build_nwb()

      

   .. method:: cleanup()

      
      

   .. method:: __preprocess_data(self)


      process data with rec_to_binaries library


   .. method:: build_nwb(self)


      Builds nwb file for experiments from given dates


   .. method:: cleanup(self)


      Remove all temporary files structure from preprocessing folder


   .. method:: __is_rec_config_valid(self)


      Check if XML is valid with XSD file



