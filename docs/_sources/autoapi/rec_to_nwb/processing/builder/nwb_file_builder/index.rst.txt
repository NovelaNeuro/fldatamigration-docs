:mod:`rec_to_nwb.processing.builder.nwb_file_builder`
=====================================================

.. py:module:: rec_to_nwb.processing.builder.nwb_file_builder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rec_to_nwb.processing.builder.nwb_file_builder.NWBFileBuilder



.. data:: path
   

   

.. data:: logger
   

   

.. py:class:: NWBFileBuilder(data_path: str, animal_name: str, date: str, nwb_metadata: MetadataManager, process_dio: bool = True, process_mda: bool = True, process_analog: bool = True, video_path: str = '', output_file: str = 'output.nwb', reconfig_header: str = '')

   Unpack data from preprocessing folder specified by arguments, and write those data into NWB file format

   :param data_path: path to directory containing all experiments data
   :type data_path: string
   :param animal_name: directory name which represents animal subject of experiment
   :type animal_name: string
   :param date: date of experiment
   :type date: string
   :param nwb_metadata: object contains metadata about experiment
   :type nwb_metadata: MetadataManager
   :param process_dio: flag if dio data should be processed
   :type process_dio: boolean
   :param process_mda: flag if mda data should be processed
   :type process_mda: boolean
   :param process_analog: flag if analog data should be processed
   :type process_analog: boolean
   :param video_path: path to directory with video files associated to nwb file
   :type video_path: string
   :param output_file: path and name specifying where .nwb file gonna be written
   :type output_file: string

   .. method:: build()

      

   .. method:: write()

      

   .. method:: build_and_append_to_nwb()

      
      

   .. method:: __extract_datasets(self, animal_name, date)



   .. method:: build(self)


      Build NWBFile

      :returns: Return NWBFile content
      :rtype: NWBFile


   .. method:: write(self, content)


      Write nwb file handler with colected data into actual file


   .. method:: __build_corrupted_data_manager(self)



   .. method:: build_and_append_to_nwb(self, process_mda_valid_time=True, process_mda_invalid_time=True, process_pos_valid_time=True, process_pos_invalid_time=True)


      Create and append to existing nwb. Set flag to add it to nwb

      :param process_mda_valid_time: True if the mda valid times should be build and append to nwb.
                                     Need the mda data inside the nwb. (default True)
      :type process_mda_valid_time: boolean
      :param process_mda_invalid_time: True if the mda invalid times should be build and append to nwb.
                                       Need the mda data inside the nwb. (default True)
      :type process_mda_invalid_time: boolean
      :param process_pos_valid_time: True if the pos valid times should be build and append to nwb.
                                     Need the pos data inside the nwb. (default True)
      :type process_pos_valid_time: boolean
      :param process_pos_invalid_time: True if the pos invalid times should be build and append to nwb.
                                       Need the pos data inside the nwb. (default True)
      :type process_pos_invalid_time: boolean

      :raises ElementExistException: If element already exist in NWB

      :returns: Return NWBFile content
      :rtype: NWBFile



