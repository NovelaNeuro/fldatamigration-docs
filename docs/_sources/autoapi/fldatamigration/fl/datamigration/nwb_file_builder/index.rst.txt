:mod:`fldatamigration.fl.datamigration.nwb_file_builder`
========================================================

.. py:module:: fldatamigration.fl.datamigration.nwb_file_builder


Module Contents
---------------


.. data:: path
   

   

.. data:: logger
   

   

.. py:class:: NWBFileBuilder(data_path: str, animal_name: str, date: str, nwb_metadata: MetadataManager, process_dio: bool = True, process_mda: bool = True, process_analog: bool = True, output_file: str = 'output.nwb')

   unpack data from preprocessing folder specified by arguments, and write those data into NWB file format

   .. method:: extract_datasets(self, animal_name, date)



   .. method:: build(self)



   .. method:: write(self, content)


      write nwb file handler with colected data into actual file


   .. method:: __build_and_inject_analog(self, nwb_content)



   .. method:: __build_and_inject_processing_module(self, nwb_content)



   .. method:: __build_and_inject_header_device(self, nwb_content)



   .. method:: __build_shanks_electrodes(self)



   .. method:: __build_shanks(self, shanks_electrodes_dict)



   .. method:: __build_and_inject_probes(self, nwb_content, shanks_dict)



   .. method:: __build_and_inject_electrode_group(self, nwb_content, probes)



   .. method:: __build_and_inject_electrodes(self, nwb_content, electrode_groups)



   .. method:: __build_and_inject_electrodes_extensions(self, nwb_content)



   .. method:: __build_and_inject_dio(self, nwb_content)



   .. method:: __get_continuous_time_files(self)



   .. method:: __build_and_inject_mda(self, nwb_content)



   .. method:: __build_and_inject_epochs(self, nwb_content)



   .. method:: build_and_inject_mda_invalid_times(self, nwb_content)



   .. method:: build_and_inject_pos_invalid_times(self, nwb_content)




